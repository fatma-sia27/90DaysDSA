inorder (Using iteration):

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> st=new Stack<>();
        ArrayList<Integer> al=new ArrayList<>();
        TreeNode node=root;
        while(true){
            if(node != null) {
                st.push(node);
                node=node.left;
            }
            else{
                if(st.isEmpty()) {
                    break;
                }
                node=st.pop();
                al.add(node.val);
                node=node.right;
            }
        }
        return al;
    }
}


Preorder (Using iteration):

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> al=new ArrayList<>();
        if(root == null) return al;
        Stack<TreeNode> st=new Stack<>();
        st.push(root);
        while(!st.isEmpty()) {
            root=st.pop();
            al.add(root.val);
            if(root.right != null) st.push(root.right);
            if(root.left != null) st.push(root.left);
        }
        return al;
    }
}


Postorder (Using iteration):

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> st1=new Stack<>();
        Stack<TreeNode> st2=new Stack<>();
        ArrayList<Integer> al=new ArrayList<>();
        if(root == null) return al;
        st1.push(root);
        
        while(!st1.isEmpty()) {
            root=st1.pop();
            st2.add(root);
            if(root.left != null) st1.push(root.left);
            if(root.right != null) st1.push(root.right);
        }
        while(!st2.isEmpty()) {
            al.add(st2.pop().val);
        }
        return al;
    }
} 
