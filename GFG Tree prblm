Ques1:
Given a Binary Tree of size N, your task is to complete the function countNonLeafNodes(), that should return the count of all the non-leaf nodes of the given binary tree.

Code:
class Solution
{
	int countNonLeafNodes(Node root) {
	    int count=0;
	    if(root == null) return 0;
	    if(root.left==null && root.right==null) return 0;
	    return 1+countNonLeafNodes(root.left)+countNonLeafNodes(root.right);
	}
}

Ques2:
Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.

Right view of following tree is 1 3 7 8.

Code:
class Solution{
    //Function to return list containing elements of right view of binary tree.
    ArrayList<Integer> rightView(Node node) {
        ArrayList<Integer> a=new ArrayList<>();
        rightViewUtill(node, a, 0);
        return a;
    }
    void rightViewUtill(Node node, ArrayList<Integer> a, int level){
        if(node == null) return;
        if(a.size()==level){
            a.add(node.data);
        }
        rightViewUtill(node.right, a, level+1);
        rightViewUtill(node.left, a, level+1);
    }
}

Ques3:
Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument.

Left view of following tree is 1 2 4 8.

Codde:
class Tree
{
    ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> a=new ArrayList<>();
        leftViewUtill(root, a, 0);
        return a;
    }
    
    void leftViewUtill(Node root, ArrayList<Integer> a, int level){
        if(root==null) return;
        
        if(a.size()==level) {
            a.add(root.data);
        }
        
        leftViewUtill(root.left, a, level+1);
        leftViewUtill(root.right, a, level+1);
    }
}


