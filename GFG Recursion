Juggler Sequence is a series of integers in which the first term starts with a positive integer number a and the remaining terms are generated from the immediate previous term using the below recurrence relation:

 a_(k+1)={|_a_k^(1/2)_|   for even a_k; |_a_k^(3/2)_|   for odd a_k, 

Given a number N, find the Juggler Sequence for this number as the first term of the sequence.


class Solution{
    static List<Integer> jugglerSequence(int N){
        // code here
        List<Integer> ll=new ArrayList<>();
        return recFun(N,ll);
    }
    
    static List<Integer> recFun(int N, List<Integer> ll){
        // if(!ll.contains(N)){
        //     ll.add(N);
        // }
        if(N==1){
            return ll;
        }
        if(N%2==0){
            N=(int)(Math.pow(N,1/2));
            ll.add(N);
        }
        else{
              N=(int)(Math.pow(N,3/2));
              ll.add(N);
        }
        
        return recFun(N,ll);
    }
}




Given a list arr of N integers, print sums of all subsets in it.

ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        return subsetSumsUtil(arr, 0, N);
    }
    
    ArrayList<Integer> subsetSumsUtil(ArrayList<Integer> arr, int idx, int N){
        if(idx == N - 1) {
            ArrayList<Integer> list = new ArrayList<>();
            list.add(0);
            list.add(arr.get(idx));
            return list;
        }
        ArrayList<Integer> list = subsetSumsUtil(arr, idx + 1, N);
        int size = list.size();
        for(int i = 0; i < size; i++) {
            list.add(list.get(i) + arr.get(idx));
        }
        
        return list;
    }
