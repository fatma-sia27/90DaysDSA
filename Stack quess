Ques1:
 Given a stack of integers and Q queries. The task is to perform operation on stack according to the query.

Note: use push() to add element in the stack, peek() to get topmost element without removal, pop() gives topmost element with removal, search() to return position if found else -1.

Code:
 class Geeks
{
    // Function to insert element to stack
    public static void insert(Stack<Integer> st, int x)
    {
        st.push(x);
        // Your code here
        
    }
    
    // Function to pop element from stack
    public static void remove(Stack<Integer> st)
    {
        // Your code here
        // while(!st.isEmpty()){
        //     int t=st.peek();
        //     st.pop();
        // }
        // int t=st.peek();
         st.pop();
        
    }
    
    // Function to return top of stack
    public static void headOf_Stack(Stack<Integer> st)
    {
        int x = st.peek();// Your code here
        System.out.println(x + " ");
    }
    
    // Function to find the element in stack
    public static void find(Stack<Integer> st, int val)
    {
    
        if(/*Your code here*/st.search(val)!=-1){
            System.out.println("Yes");
        }
        else{
            System.out.println("No");
        }
        
    }
}

Ques2:
 Given a mathematical equation using numbers/variables and +, -, *, /. Print the equation in reverse.
 
code:
 class Solution
{
   
    String reverseEqn(String S)
    {
        // your code here\
        Stack<String> stk=new Stack<>();
        String st="";
        for(int i=0; i<S.length(); i++){
            char ch=S.charAt(i);
            if(ch=='+' || ch=='-' || ch=='*' || ch=='/'){
                stk.push(st);
                st="";
                String x="";
                x+=ch;
                stk.push(x);
            }
            else{
                st+=ch;
            }
            
        }
        stk.push(st);
        String s="";
        while(!stk.isEmpty()){
            s+=stk.peek();
            stk.pop();
        }
        return s;
    }
}
