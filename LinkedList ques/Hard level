Ques1:
 Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Code:
 class Solution {
    public void reverse(ListNode s, ListNode e){
        ListNode prev=null, curr=s, nxt=e;
        while(prev!=e){
            curr.next=prev;
            prev=curr;
            curr=nxt;
            if(nxt!=null)nxt=nxt.next;
        }
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null || head.next==null)return head;
        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode beforeStart=dummy, e=head;
        int i=0;
        while(e!=null){
            i++;
            if(i%k==0){
                ListNode s=beforeStart.next, temp=e.next;
                reverse(s,e);
                beforeStart.next=e;
                s.next=temp;
                beforeStart=s;
                e=temp;
            }
            else{
                e=e.next;
            }
        }
        return dummy.next;
    }
}

Ques2:
 Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.
 
Code:
 class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode temp=head;
        ListNode dum=new ListNode();
        ListNode pre=dum;
        pre.next=temp;
        if(head==null){
            return null;
        }
        while(temp!=null){
            if(temp.val==val){
                pre.next=temp.next;
                temp=temp.next;
            }
            else{
                temp=temp.next;
            pre=pre.next;
            }
            // temp=temp.next;
            // pre=pre.next;
        }
        return dum.next;
    }
}
